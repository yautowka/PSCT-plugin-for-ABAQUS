# -*- coding: utf-8 -*-
"""Graph_for_4_nodes_from_frames.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tMhAtaftOfWfyRvwrk67oXs648CqmtDr
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os

def get_ids_of_4_nodes(data):
  ids = []
  spots = []
  min1 = np.min(data[::,1])
  min2 = np.min(data[::,2])
  min3 = np.min(data[::,3])
  max2 = np.max(data[::,2])
  max3 = np.max(data[::,3])
  for i in range(len(data[::,0])):
    coord1 = data[i,1]
    coord2 = data[i,2]
    coord3 = data[i,3]
    if coord1 == min1:
      if coord2 == min2:
        if coord3 == min3:
          ids.append(i)
          spots.append('Левый нижний')
        if coord3 == max3:
          ids.append(i)
          spots.append('Правый нижний')
      if coord2 == max2:
        if coord3 == min3:
          ids.append(i)
          spots.append('Левый верхний')
        if coord3 == max3:
          ids.append(i)
          spots.append('Правый верхний')
  return ids, spots


def get_data_for_graph(path, files, ids):
  PEEQ1 = []
  Mises1 = []
  PEEQ2 = []
  Mises2 = []
  PEEQ3 = []
  Mises3 = []
  PEEQ4 = []
  Mises4 = []
  Times = []
  Rf2 = []
  U21 = []
  U22 = []
  U23 = []
  U24 = []
  for file in files:
    
    time = np.loadtxt(path+'/'+file,dtype='str',skiprows=8,max_rows=1)[-1]
    Times.append(time)
    rf = np.loadtxt(path+'/'+file,dtype='double',skiprows=22,max_rows=1)[8]
    Rf2.append(abs(rf)/1000000)
    #print(time)
    
    data1 = np.loadtxt(path+'/'+file,dtype='double',skiprows=44+ids[0],max_rows=1)
    data2 = np.loadtxt(path+'/'+file,dtype='double',skiprows=44+ids[1],max_rows=1)
    data3 = np.loadtxt(path+'/'+file,dtype='double',skiprows=44+ids[2],max_rows=1)
    data4 = np.loadtxt(path+'/'+file,dtype='double',skiprows=44+ids[3],max_rows=1)
    PEEQ1.append(data1[23])
    PEEQ2.append(data2[23])
    PEEQ3.append(data3[23])
    PEEQ4.append(data4[23])
    
    Mises1.append(data1[10]/1000000)
    Mises2.append(data2[10]/1000000)
    Mises3.append(data3[10]/1000000)
    Mises4.append(data4[10]/1000000)
    
    U21.append(abs(data1[5])*1000)
    U22.append(abs(data2[5])*1000)
    U23.append(abs(data3[5])*1000)
    U24.append(abs(data4[5])*1000)


  return PEEQ1, Mises1, PEEQ2, Mises2, PEEQ3, Mises3, PEEQ4, Mises4, Times, Rf2, U21, U22, U23, U24


def is_zero_frame(s):
    if s.split('.')[0].split('_')[-1]=='0':
        return True
    return False


def sort_files(files):
    frames = []
    for file in files:
        frames.append(int(file.split('.')[0].split('_')[-1]))
    df = pd.DataFrame(list(zip(frames, files)),
               columns =['Frame', 'File'])
    df = df.astype({'Frame':'int'})
    df.Frame = df.Frame.astype(float)
    df = df.sort_values('Frame')
    #print(df)
    #print(df.dtypes)
    return df['File'].tolist()

def get_ids_of_3graph(data):
    ids = []
    min1 = np.min(data[::,1])
    max3 = np.max(data[::,3])
    min3 = np.min(data[::,3])
    for i in range(len(data[::,0])):
        coord3 = data[i,3]
        if coord3 == min3:
            ids.append(i)  
    return ids, min1, max3

def get_breadth_and_distance(ids_for_3graph, path, file, min1, max3):
    half_breadth = []
    distance = []
    data = np.loadtxt(path + '/' + file,dtype='double',skiprows=44)
    #print(ids_for_3graph)
    for i in ids_for_3graph:
        half_breadth.append(abs(data[i,3] - max3)*1000)
        distance.append(abs(data[i,1] - min1)*1000)
    return half_breadth, distance
    

path_to_main_folder = 'D:/VKR_PSCT/TXT_for_analysis/Трение_2'
folders = os.listdir(path_to_main_folder)
path_figs = 'D:/VKR_PSCT/plots/Трение_2/'
percantage = 0
size = len(folders)
print('start')
plt.clf()
markers = [".",",","o","v","^","<",">","1","2","3","4","8","s","p","P","*","h","H","+","x","X","D","d","|","_",0,1,2,3,4,5,6,7,8,9,10,11]
for folder in folders:
    path = path_to_main_folder + '/' + folder
    f = os.listdir(path)
    files = sort_files(f)
    #print(files)
    
    zeroFrame = ''
    for file in files:
        if is_zero_frame(file):
            zeroFrame = file
            break
    
    #zeroFrame = 'Static_Rate_50_5_1_02_0.txt'
    data = np.loadtxt(path + '/' + zeroFrame,dtype='double',skiprows=44)
    #print(data[::,0])


    ids, spots = get_ids_of_4_nodes(data)
    
    #print(ids)
    #print(spots)
    ids_for_3graph, min1, max3 = get_ids_of_3graph(data)
    #print(ids_for_3graph)
    half_breadth, distance = get_breadth_and_distance(ids_for_3graph,path+'/', files[-1], min1, max3)

    
    
    PEEQ1, Mises1, PEEQ2, Mises2, PEEQ3, Mises3, PEEQ4, Mises4, Times, Rf2, U21, U22, U23, U24 = get_data_for_graph(path, files, ids)
    # plt.figure()
    plt.xlabel("Расстояние от центральной линии, мм" )
    plt.ylabel("Половина ширины, мм")
    plt.plot(distance, half_breadth, 'ro')
    #plt.legend()
    plt.savefig(path_figs + folder + '_DistanceHalfBreadth.png', dpi=600)
    plt.clf()
    
    
    amount1 = len(PEEQ1)
    amount2 = len(PEEQ2)
    amount3 = len(PEEQ3)
    amount4 = len(PEEQ4)
    
    # for i in range(len(PEEQ1)):
    #     if PEEQ1[i] >= 1.2:
    #         amount1 = i
    #         break
    # for i in range(len(PEEQ2)):
    #     if PEEQ2[i] >= 1.2:
    #         amount2 = i
    #         break
    # for i in range(len(PEEQ3)):
    #     if PEEQ3[i] >= 1.2:
    #         amount3 = i
    #         break
    # for i in range(len(PEEQ4)):
    #     if PEEQ4[i] >= 1.2:
    #         amount4 = i
    #         break
    
    # if folder.split('_')[4] == '10':
    #     amount3 -= 2        
    max_amount = max(amount1,amount2,amount3,amount4)
    min_amount = min(amount1,amount2,amount3,amount4)
    plt.xlabel("Деформация, -" )
    plt.ylabel("Напряжение, Мпа")
    plt.plot(PEEQ1[:min_amount], Mises1[:min_amount], label = spots[0], ls = '-')
    plt.plot(PEEQ2[:min_amount], Mises2[:min_amount], label = spots[1], ls = '--')
    plt.plot(PEEQ3[:min_amount], Mises3[:min_amount], label = spots[2], ls = ':')
    plt.plot(PEEQ4[:min_amount], Mises4[:min_amount], label = spots[3], ls = '-.')
    plt.legend()
    plt.savefig(path_figs + folder + '_PeeqMises.png', dpi=600)
    plt.clf()
    
    
    plt.xlabel("Время, с")
    plt.ylabel("Деформация, -" )
    plt.plot(Times[:min_amount], PEEQ1[:min_amount], label = spots[0], ls = '-')
    plt.plot(Times[:min_amount], PEEQ2[:min_amount], label = spots[1], ls = '--')
    plt.plot(Times[:min_amount], PEEQ3[:min_amount], label = spots[2], ls = ':')
    plt.plot(Times[:min_amount], PEEQ4[:min_amount], label = spots[3], ls = '-.')
    plt.xticks(Times[:min_amount:int(min_amount/4)])
    plt.legend()
    plt.savefig(path_figs + folder + '_PeeqTime.png', dpi=600)
    plt.clf()
    
    
    plt.xlabel("Время, с")
    plt.ylabel("Напряжение, Мпа" )
    plt.plot(Times[:min_amount], Mises1[:min_amount], label = spots[0], ls = '-')
    plt.plot(Times[:min_amount], Mises2[:min_amount], label = spots[1], ls = '--')
    plt.plot(Times[:min_amount], Mises3[:min_amount], label = spots[2], ls = ':')
    plt.plot(Times[:min_amount], Mises4[:min_amount], label = spots[3], ls = '-.')
    plt.xticks(Times[:min_amount:int(min_amount/4)])
    plt.legend()
    plt.savefig(path_figs + folder + '_MisesTime.png', dpi=600)
    plt.clf()
    
    
    plt.xlabel("Перемещение, мм" )
    plt.ylabel("Усилие, МН")
    plt.plot(U21[:min_amount], Rf2[:min_amount], label = spots[0], ls = '-')
    plt.plot(U22[:min_amount], Rf2[:min_amount], label = spots[1], ls = '--')
    plt.plot(U23[:min_amount], Rf2[:min_amount], label = spots[2], ls = ':')
    plt.plot(U24[:min_amount], Rf2[:min_amount], label = spots[3], ls = '-.')
    plt.legend()
    plt.savefig(path_figs + folder + '_RfU.png', dpi=600)
    plt.clf()
    
   
    
    plt.xlabel("Время, с" )
    plt.ylabel("Усилие, МН")
    plt.plot(Times[:min_amount], Rf2[:min_amount])
    plt.xticks(Times[:min_amount:int(min_amount/4)])
    #plt.legend()
    plt.savefig(path_figs + folder + '_RfTime.png', dpi=600)
    plt.clf()
    
    
    percantage += 100 / size
    print('ready - %0.2f' % (percantage) + '%')
